[
  {
    "id": "EOC_GET_STAMINA_CONSUMPTION_MODIFIER",
    "type": "effect_on_condition",
    "eoc_type": "EVENT",
    "required_event": "avatar_moves",

    "effect": [
      { "run_eocs": ["EOC_GET_INVENTORY_WEIGHT"] },

      {
        "//": "weight in mg â†’ weight in kg",
        "math": ["_converted_weight", "=", "u_inventory_weight / 1000000"]
      },
      {
        "//": [
          "13 kg = baseline carry capacity",
          "4 kg = additional carry capacity per point of strength"
        ],
        "math": ["_carry_capacity", "=", "13 + u_val('strength') * 4"]
      },
      {
        "math": ["_weight_ratio", "=", "_converted_weight / _carry_capacity"]
      },
      {
        "math": [
          "u_stamina_modifier",
          "=",
          "( 1 + _weight_ratio ) ^ ( 1.44 + _weight_ratio )"
        ]
      },

      {
        "math": ["_stamina_delta", "=", "u_stamina_modifier"]
      },
      {
        "math": ["u_val('stamina')", "-=", "_stamina_delta"]
      },
      {
        "if": { "math": ["reporting_weight", "==", "1"] },
        "then": [
          {
            "math": ["_debug_string_stamina", "=", "u_val('stamina')"]
          },
          {
            "message": "Stamina: <context_val:debug_string_stamina> (-<context_val:stamina_delta>)"
          }
        ]
      },

      {
        "math": [
          "_fatigue_modifier",
          "=",
          "( u_stamina_modifier - 1 ) * 0.00624"
        ]
      },
      {
        "math": ["u_fatigue_storage", "+=", "_fatigue_modifier"]
      },
      {
        "if": { "math": ["u_fatigue_storage", ">", "1"] },
        "then": [
          {
            "math": [
              "u_fatigue_storage_steps_value",
              "+=",
              "u_fatigue_storage_steps"
            ]
          },
          { "math": ["u_fatigue_storage_steps_quantity", "+=", "1"] },
          {
            "math": [
              "u_fatigue_storage_steps_average",
              "=",
              "u_fatigue_storage_steps_value / u_fatigue_storage_steps_quantity"
            ]
          },
          { "math": ["u_fatigue_storage_steps", "=", "0"] },

          { "math": ["u_fatigue_storage", "-=", "1"] },
          { "math": ["u_val('fatigue')", "+=", "1"] }
        ],
        "else": [{ "math": ["u_fatigue_storage_steps", "+=", "1"] }]
      },
      {
        "if": { "math": ["reporting_weight", "==", "1"] },
        "then": [
          {
            "math": ["_debug_string_fatigue", "=", "u_val('fatigue')"]
          },
          {
            "message": "Fatigue: <context_val:debug_string_fatigue> (+<context_val:fatigue_modifier> = <u_val:fatigue_storage> / <u_val:fatigue_storage_steps_average>)"
          }
        ]
      }
    ]
  },

  {
    "id": "EOC_GET_INVENTORY_WEIGHT",
    "type": "effect_on_condition",

    "effect": [
      { "math": ["u_inventory_weight", "=", "0"] },
      {
        "//": "while this is technically only aimed at worn items, because of the pockets system, this grabs weight of the entire inventory sans the wielded item",
        "u_run_inv_eocs": "all",
        "search_data": [{ "worn_only": true }],
        "true_eocs": [
          {
            "id": "inline_EOC_GET_INVENTORY_WEIGHT",
            "effect": [
              {
                "math": ["u_inventory_weight", "+=", "n_val('weight')"]
              }
            ]
          }
        ]
      },
      {
        "//": "wielded items are separate from worn items",
        "u_run_inv_eocs": "all",
        "search_data": [{ "wielded_only": true }],
        "true_eocs": [
          {
            "id": "inline_EOC_GET_WIELDED_WEIGHT",
            "effect": [
              { "math": ["u_inventory_weight", "+=", "n_val('weight')"] }
            ]
          }
        ]
      }
    ]
  }
]
